import './backtest.css';
import { notifications } from '../../utils/notifications.js';
import { initCustomCalendars } from '../../utils/CustomCalendar.js';

export class BacktestModule {
    constructor() {
        this.trades = JSON.parse(localStorage.getItem('backtestTrades')) || [];
        this.currencies = ['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'NZDUSD', 'EURGBP', 'EURJPY'];
        this.rrValues = JSON.parse(localStorage.getItem('customRrValues')) || ['-1', '-0.8', '0', '1.5', '2'];
        this.currentFilter = { currency: 'all', result: 'all', category: 'all', group: 'all', dateFrom: '', dateTo: '' };
        this.randomMode = JSON.parse(localStorage.getItem('randomModeState')) || false;
        this.collapsedGroups = new Set(JSON.parse(localStorage.getItem('collapsedGroups')) || []); // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    }

    render() {
        return `
            <div class="backtest-container">
                <div class="backtest-header">
                    <h2>üìä Backtest Journal</h2>
                    <div class="header-actions">
                        <button class="clear-all-btn" id="clearAllBtn">–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª</button>
                        <button class="group-trades-btn" id="groupTradesBtn">–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button class="add-trade-btn" id="addTradeBtn">+ –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É</button>
                    </div>
                </div>
                
                <div class="trade-form-container" id="tradeFormContainer" style="display: none;">
                    ${this.renderTradeForm()}
                </div>
                
                <div class="filters-container">
                    ${this.renderFilters()}
                </div>
                
                <div class="trades-stats">
                    ${this.renderStats()}
                </div>
                
                <div class="trades-list">
                    ${this.renderTradesList()}
                </div>
            </div>
        `;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ renderTradeForm –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
    renderTradeForm() {
        const lastTradeDate = this.getLastTradeDate();
        const nextDate = this.getNextDate(lastTradeDate);
        const lastGroup = localStorage.getItem('lastSelectedGroup') || '';
        const lastCurrency = localStorage.getItem('lastSelectedCurrency') || 'EURUSD'; // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã

        return `
<div class="trade-form">
    <h3>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</h3>
    <form id="tradeForm">
        <div class="form-row">
            <div class="form-group">
                <label>–¢–∏–ø</label>
                <div class="trade-type-buttons">
                    <button type="button" class="type-btn active" data-type="long">üòá Long</button>
                    <button type="button" class="type-btn" data-type="short">üòà Short</button>
                </div>
            </div>
            <div class="form-group">
                <label>–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞</label>
                <select name="currency" required>
                    ${this.currencies.map(cur => `<option value="${cur}" ${cur === lastCurrency ? 'selected' : ''}>${cur}</option>`).join('')}
                </select>
            </div>
            <div class="form-group">
                <label>–ì—Ä—É–ø–ø–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)</label>
                <select name="category">
                    <option value="">–ë–µ–∑ –≥—Ä—É–ø–ø—ã</option>
                    ${this.getExistingGroups().map(group => `
                        <option value="${group}" ${group === lastGroup ? 'selected' : ''}>${group}</option>
                    `).join('')}
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group">
                <label>–î–∞—Ç–∞</label>
                <div class="date-controls">
                    <button type="button" class="date-btn" id="prevDateBtn">‚Üê</button>
                    <input type="date" name="date" value="${nextDate}" required>
                    <button type="button" class="date-btn" id="nextDateBtn">‚Üí</button>
                </div>
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç (RR)</label>
                <div class="rr-controls">
                    <div class="rr-buttons" id="rrButtonsContainer">
                        ${this.rrValues.map(value => `
                            <button type="button" class="rr-btn" data-rr="${value}">
                                ${parseFloat(value) > 0 ? '+' + value : value}
                            </button>
                        `).join('')}
                        <button type="button" class="add-rr-btn" id="addRrBtn">+</button>
                        <button type="button" class="remove-rr-btn" id="removeRrBtn">‚àí</button>
                    </div>
                    <div class="rr-input-row">
                        <input type="number" name="result" step="0.1" value="" placeholder="0" required>
                        <span class="random-toggle-label">Random</span>
                        <label class="random-toggle-switch">
                            <input type="checkbox" id="randomMode" ${this.randomMode ? 'checked' : ''}>
                            <span class="random-toggle-slider"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-actions">
            <button type="button" id="clearFormBtn">–û—á–∏—Å—Ç–∏—Ç—å</button>
            <button type="button" id="cancelTradeBtn">–û—Ç–º–µ–Ω–∞</button>
            <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        </div>

        <div class="hotkeys-info">
            <div class="hotkey">
                <kbd>Tab</kbd>
                <span>–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–∏–ø</span>
            </div>
            <div class="hotkey">
                <kbd>Space</kbd>
                <span>–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å RR / —Ä–∞–Ω–¥–æ–º</span>
            </div>
            <div class="hotkey">
                <kbd>‚Üê ‚Üí</kbd>
                <span>–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É</span>
            </div>
            <div class="hotkey">
                <kbd>Enter</kbd>
                <span>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
            </div>
        </div>
    </form>
</div>
`;
    }

    renderFilters() {
        const groups = [...new Set(this.trades.filter(t => t.groupName).map(t => t.groupName))];

        return `
        <div class="filters">
            <div class="filter-group">
                <label>–í–∞–ª—é—Ç–∞:</label>
                <select id="currencyFilter">
                    <option value="all">–í—Å–µ</option>
                    ${this.currencies.map(cur => `<option value="${cur}">${cur}</option>`).join('')}
                </select>
            </div>
            <div class="filter-group">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                <select id="resultFilter">
                    <option value="all">–í—Å–µ</option>
                    <option value="profit">–ü—Ä–∏–±—ã–ª—å</option>
                    <option value="loss">–£–±—ã—Ç–æ–∫</option>
                    <option value="breakeven">–í –Ω–æ–ª—å</option>
                </select>
            </div>
            <div class="filter-group">
                <label>–ì—Ä—É–ø–ø–∞:</label>
                <select id="groupFilter">
                    <option value="all">–í—Å–µ</option>
                    <option value="ungrouped">–ë–µ–∑ –≥—Ä—É–ø–ø—ã</option>
                    ${groups.map(group => `<option value="${group}">${group}</option>`).join('')}
                </select>
            </div>
            <div class="filter-group">
                <label>–û—Ç:</label>
                <input type="date" id="dateFromFilter">
            </div>
            <div class="filter-group">
                <label>–î–æ:</label>
                <input type="date" id="dateToFilter">
            </div>
            <button id="clearFiltersBtn">–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
        </div>
        `;
    }

    renderStats() {
        const filteredTrades = this.getFilteredTrades();
        const totalTrades = filteredTrades.length;

        if (totalTrades === 0) {
            return `
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">0</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
                </div>
            </div>
        `;
        }

        const winTrades = filteredTrades.filter(t => t.result > 0).length;
        const lossTrades = filteredTrades.filter(t => t.result < 0).length;
        const breakevenTrades = filteredTrades.filter(t => t.result === 0).length;

        // Win Rate —Å—á–∏—Ç–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –æ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è breakeven)
        const tradesWithResult = winTrades + lossTrades;
        const winRate = tradesWithResult > 0 ? ((winTrades / tradesWithResult) * 100).toFixed(1) : 0;

        const totalPnL = filteredTrades.reduce((sum, t) => sum + t.result, 0).toFixed(2);

        // –ü–æ–¥—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–∏–π
        const streaks = this.calculateStreaks(filteredTrades);

        return `
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-number">${totalTrades}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
        </div>
        <div class="stat-card win">
            <div class="stat-number">${winTrades}</div>
            <div class="stat-label">–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ</div>
            <div class="stat-streak">–º–∞–∫—Å. —Å–µ—Ä–∏—è: ${streaks.maxWinStreak}</div>
        </div>
        <div class="stat-card loss">
            <div class="stat-number">${lossTrades}</div>
            <div class="stat-label">–£–±—ã—Ç–æ—á–Ω—ã–µ</div>
            <div class="stat-streak">–º–∞–∫—Å. —Å–µ—Ä–∏—è: ${streaks.maxLossStreak}</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${breakevenTrades}</div>
            <div class="stat-label">–í –Ω–æ–ª—å</div>
        </div>
        <div class="stat-card ${winRate >= 50 ? 'win' : 'loss'}">
            <div class="stat-number">${winRate}%</div>
            <div class="stat-label">Win Rate</div>
        </div>
        <div class="stat-card ${totalPnL > 0 ? 'win' : totalPnL < 0 ? 'loss' : ''}">
            <div class="stat-number">${totalPnL} RR</div>
            <div class="stat-label">–û–±—â–∏–π P&L</div>
        </div>
    </div>
    `;
    }

    renderTradesList() {
        const filteredTrades = this.getFilteredTrades();

        if (filteredTrades.length === 0) {
            return `<div class="no-trades"><p>–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p></div>`;
        }

        let currentGroup = null;

        return `
    <div class="trades-table">
        <div class="table-header">
            <div>–î–∞—Ç–∞</div>
            <div>–¢–∏–ø</div>
            <div>–í–∞–ª—é—Ç–∞</div>
            <div>–†–µ–∑—É–ª—å—Ç–∞—Ç</div>
            <div>–î–µ–π—Å—Ç–≤–∏—è</div>
        </div>
        ${filteredTrades.map((trade, index) => {
            let groupHeader = '';
            let tradeRow = '';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É (5 –º–∏–Ω—É—Ç = 300000 –º—Å)
            const tradeAge = Date.now() - new Date(trade.createdAt).getTime();
            const canModify = tradeAge < 300000; // 5 –º–∏–Ω—É—Ç

            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            if (trade.groupName && trade.groupName !== currentGroup) {
                currentGroup = trade.groupName;
                const isCollapsed = this.collapsedGroups.has(trade.groupName);
                const groupTradesCount = filteredTrades.filter(t => t.groupName === trade.groupName).length;

                groupHeader = `
                    <div class="group-separator">
                        <div class="group-info">
                            <button class="collapse-btn" data-group="${trade.groupName}" title="${isCollapsed ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '–°–≤–µ—Ä–Ω—É—Ç—å'}">
                                ${isCollapsed ? '‚ñ∂' : '‚ñº'}
                            </button>
                            <span>üìÅ ${trade.groupName} (${groupTradesCount})</span>
                        </div>
                        <button class="ungroup-btn" data-group="${trade.groupName}" title="–†–∞—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å">‚úï</button>
                    </div>
                `;
            } else if (!trade.groupName && currentGroup !== null) {
                currentGroup = null;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–∞
            const shouldShowTrade = !trade.groupName || !this.collapsedGroups.has(trade.groupName);

            if (shouldShowTrade) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
                const typeIcon = trade.type === 'long' ? 'üòá' : 'üòà';
                const typeText = trade.type === 'long' ? 'LONG' : 'SHORT';

                tradeRow = `
                    <div class="table-row ${trade.groupName ? 'grouped' : ''}">
                        <div class="trade-date" data-date="${trade.date}" title="–ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –¥–∞—Ç—É">${this.formatDate(trade.date)}</div>
                        <div class="trade-type ${trade.type} ${canModify ? '' : 'disabled'}" data-id="${trade.id}" title="${canModify ? '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Å–º–µ–Ω—ã —Ç–∏–ø–∞' : '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç)'}">${typeIcon} ${typeText}</div>
                        <div class="trade-currency">${trade.currency}</div>
                        <div class="trade-result ${trade.result > 0 ? 'profit' : trade.result < 0 ? 'loss' : 'breakeven'}">
                            ${trade.result > 0 ? '+' : ''}${trade.result} RR
                        </div>
                        <div class="trade-actions">
                            <button class="delete-btn ${canModify ? '' : 'disabled'}" data-id="${trade.id}" title="${canModify ? '–£–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É' : '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç)'}">üóë</button>
                        </div>
                    </div>
                `;
            }

            return groupHeader + tradeRow;
        }).join('')}
    </div>
    `;
    }

    calculateStreaks(trades) {
        if (trades.length === 0) {
            return { maxWinStreak: 0, maxLossStreak: 0 };
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä–æ–π –∫ –Ω–æ–≤–æ–π)
        const sortedTrades = [...trades].sort((a, b) => new Date(a.date) - new Date(b.date));

        let maxWinStreak = 0;
        let maxLossStreak = 0;
        let currentWinStreak = 0;
        let currentLossStreak = 0;

        for (const trade of sortedTrades) {
            if (trade.result > 0) {
                // –ü—Ä–∏–±—ã–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞
                currentWinStreak++;
                currentLossStreak = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é —É–±—ã—Ç–∫–æ–≤
                maxWinStreak = Math.max(maxWinStreak, currentWinStreak);
            } else if (trade.result < 0) {
                // –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞
                currentLossStreak++;
                currentWinStreak = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –ø—Ä–∏–±—ã–ª–µ–π
                maxLossStreak = Math.max(maxLossStreak, currentLossStreak);
            }
            // –ï—Å–ª–∏ trade.result === 0 (breakeven), –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏–∏
        }

        return { maxWinStreak, maxLossStreak };
    }

    toggleGroupCollapse(groupName) {
        if (this.collapsedGroups.has(groupName)) {
            this.collapsedGroups.delete(groupName);
        } else {
            this.collapsedGroups.add(groupName);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        localStorage.setItem('collapsedGroups', JSON.stringify([...this.collapsedGroups]));

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateDisplay();
    }

    getFilteredTrades() {
        return this.trades.filter(trade => {
            if (this.currentFilter.currency !== 'all' && trade.currency !== this.currentFilter.currency) {
                return false;
            }

            if (this.currentFilter.result !== 'all') {
                if (this.currentFilter.result === 'profit' && trade.result <= 0) return false;
                if (this.currentFilter.result === 'loss' && trade.result >= 0) return false;
                if (this.currentFilter.result === 'breakeven' && trade.result !== 0) return false;
            }

            if (this.currentFilter.group && this.currentFilter.group !== 'all') {
                if (this.currentFilter.group === 'ungrouped' && trade.groupName) return false;
                if (this.currentFilter.group !== 'ungrouped' && trade.groupName !== this.currentFilter.group) return false;
            }

            if (this.currentFilter.dateFrom && trade.date < this.currentFilter.dateFrom) return false;
            if (this.currentFilter.dateTo && trade.date > this.currentFilter.dateTo) return false;

            return true;
        }).sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
            if (a.groupName && !b.groupName) return -1;
            if (!a.groupName && b.groupName) return 1;
            if (a.groupName !== b.groupName) return (a.groupName || '').localeCompare(b.groupName || '');

            // –í–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è: –ù–û–í–´–ï –í–í–ï–†–•–£
            // –ï—Å–ª–∏ –µ—Å—Ç—å createdAt - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–¥–µ–ª–∫–∏
            const timeA = a.createdAt ? new Date(a.createdAt).getTime() : new Date(a.date).getTime();
            const timeB = b.createdAt ? new Date(b.createdAt).getTime() : new Date(b.date).getTime();
            return timeB - timeA;
        });
    }

    formatDate(dateStr) {
        return new Date(dateStr).toLocaleDateString('ru-RU');
    }

    saveTrades() {
        console.log('üíæ saveTrades() –≤—ã–∑–≤–∞–Ω');
        console.log('üìù –°–æ—Ö—Ä–∞–Ω—è—é trades:', this.trades);
        localStorage.setItem('backtestTrades', JSON.stringify(this.trades));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    }

    addTrade(tradeData) {
        console.log('üîÑ addTrade –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', tradeData);

        const trade = {
            id: Date.now(),
            ...tradeData,
            createdAt: new Date().toISOString()
        };

        console.log('üíæ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏:', trade);
        console.log('üìä –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ trades –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', this.trades.length);

        if (tradeData.category) {
            const existingGroup = this.trades.find(t => t.groupName === tradeData.category);
            if (existingGroup) {
                trade.groupId = existingGroup.groupId;
                trade.groupName = tradeData.category;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (tradeData.category) {
            localStorage.setItem('lastSelectedGroup', tradeData.category);
        }

        // –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        if (tradeData.currency) {
            localStorage.setItem('lastSelectedCurrency', tradeData.currency);
        }

        this.trades.push(trade);
        this.saveTrades();
        this.updateDisplay();
        notifications.success('–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    deleteTrade(tradeId) {
        this.trades = this.trades.filter(t => t.id !== parseInt(tradeId));
        this.saveTrades();
        this.updateDisplay();
        notifications.success('–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
    }

    updateDisplay() {
        document.querySelector('.trades-stats').innerHTML = this.renderStats();
        document.querySelector('.trades-list').innerHTML = this.renderTradesList();
    }

    highlightDateButton(direction) {
        const btn = document.getElementById(direction === 'prev' ? 'prevDateBtn' : 'nextDateBtn');
        btn.classList.add('pressed');
        setTimeout(() => btn.classList.remove('pressed'), 150);
    }

    cycleRrValue() {
        const resultInput = document.querySelector('input[name="result"]');
        const rrButtons = document.querySelectorAll('.rr-btn');

        if (this.randomMode) {
            // –†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const randomIndex = Math.floor(Math.random() * this.rrValues.length);
            const randomValue = this.rrValues[randomIndex];

            resultInput.value = randomValue;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            rrButtons.forEach(btn => btn.classList.remove('selected'));
            const targetBtn = document.querySelector(`[data-rr="${randomValue}"]`);
            if (targetBtn) {
                targetBtn.classList.add('selected');
            }
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0, +–º–∞–∫—Å, -–º–∞–∫—Å, +—Å–ª–µ–¥, -—Å–ª–µ–¥

            // –†–∞–∑–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const zeroValues = this.rrValues.filter(v => parseFloat(v) === 0);
            const positiveValues = this.rrValues.filter(v => parseFloat(v) > 0)
                .sort((a, b) => parseFloat(b) - parseFloat(a)); // –ü–æ —É–±—ã–≤–∞–Ω–∏—é: +2, +1.5
            const negativeValues = this.rrValues.filter(v => parseFloat(v) < 0)
                .sort((a, b) => parseFloat(a) - parseFloat(b)); // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é: -2, -0.8

            // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0, +2, -2, +1.5, -0.8
            const sequence = [];

            // –î–æ–±–∞–≤–ª—è–µ–º 0 –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (zeroValues.length > 0) {
                sequence.push(zeroValues[0]);
            }

            // –ß–µ—Ä–µ–¥—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            const maxLength = Math.max(positiveValues.length, negativeValues.length);

            for (let i = 0; i < maxLength; i++) {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
                if (i < positiveValues.length) {
                    sequence.push(positiveValues[i]);
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –ø–æ –º–æ–¥—É–ª—é –∫ –º–µ–Ω—å—à–µ–º—É)
                if (i < negativeValues.length) {
                    sequence.push(negativeValues[i]);
                }
            }

            console.log('Sequence:', sequence); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            const currentValue = resultInput.value;
            let currentIndex = sequence.indexOf(currentValue);

            if (currentIndex === -1) currentIndex = -1; // –ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

            const nextIndex = (currentIndex + 1) % sequence.length;
            const nextValue = sequence[nextIndex];

            resultInput.value = nextValue;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            rrButtons.forEach(btn => btn.classList.remove('selected'));
            const targetBtn = document.querySelector(`[data-rr="${nextValue}"]`);
            if (targetBtn) {
                targetBtn.classList.add('selected');
            }

            console.log(`Current: ${currentValue} -> Next: ${nextValue}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
    }

    initializeRrButtons() {
        const rrButtons = document.querySelectorAll('.rr-btn');

        rrButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const value = btn.dataset.rr;
                document.querySelector('input[name="result"]').value = value;

                rrButtons.forEach(b => b.classList.remove('selected'));
                btn.classList.add('selected');
            });
        });
    }

    getExistingGroups() {
        return [...new Set(this.trades.filter(t => t.groupName).map(t => t.groupName))];
    }

    clearAllTrades() {
        const filteredTrades = this.getFilteredTrades();

        if (filteredTrades.length === 0) {
            notifications.warning('–ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        const filteredTradeIds = new Set(filteredTrades.map(t => t.id));

        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        const originalCount = this.trades.length;
        this.trades = this.trades.filter(trade => !filteredTradeIds.has(trade.id));
        const deletedCount = originalCount - this.trades.length;

        this.saveTrades();
        this.updateDisplay();

        if (deletedCount === originalCount) {
            notifications.success('–ñ—É—Ä–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
        } else {
            notifications.success(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ ${originalCount}`);
        }
    }

    async groupTrades() {
        const ungroupedTrades = this.trades.filter(t => !t.groupId);
        if (ungroupedTrades.length === 0) {
            notifications.warning('–ù–µ—Ç –Ω–µ—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
            return;
        }

        const groupName = await this.showGroupModal(ungroupedTrades.length);
        if (!groupName) return;

        const groupId = Date.now();
        ungroupedTrades.forEach(trade => {
            trade.groupId = groupId;
            trade.groupName = groupName;
        });

        this.saveTrades();
        this.updateDisplay();
        notifications.success(`–°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ "${groupName}" —Å ${ungroupedTrades.length} —Å–¥–µ–ª–∫–∞–º–∏`);
    }

    getLastTradeDate() {
        if (this.trades.length === 0) return new Date().toISOString().split('T')[0];
        const sortedTrades = [...this.trades].sort((a, b) => new Date(b.date) - new Date(a.date));
        return sortedTrades[0].date;
    }

    changeDateBy(days) {
        const dateInput = document.querySelector('input[name="date"]');
        const currentDate = new Date(dateInput.value);
        currentDate.setDate(currentDate.getDate() + days);
        dateInput.value = currentDate.toISOString().split('T')[0];
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ clearForm
    clearForm() {
        const form = document.getElementById('tradeForm');
        form.reset();

        // –ù–ï –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        // const resultInput = document.querySelector('input[name="result"]');
        // resultInput.value = '';

        const nextDate = this.getNextDate(this.getLastTradeDate());
        document.querySelector('input[name="date"]').value = nextDate;

        document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
        document.querySelector('[data-type="long"]').classList.add('active');

        // –ù–ï —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å RR –∫–Ω–æ–ø–æ–∫
        // document.querySelectorAll('.rr-btn').forEach(btn => btn.classList.remove('selected'));
    }

    getNextDate(lastDate) {
        const date = new Date(lastDate);
        date.setDate(date.getDate() + 1);
        return date.toISOString().split('T')[0];
    }

    showGroupModal(tradesCount) {
        return new Promise((resolve) => {
            const modal = document.createElement('div');
            modal.className = 'modal-backdrop';
            modal.innerHTML = `
                <div class="modal">
                    <h3>–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É</h3>
                    <p>–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å ${tradesCount} —Å–¥–µ–ª–æ–∫</p>
                    <input type="text" id="groupNameInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" maxlength="50">
                    <div class="modal-actions">
                        <button id="cancelGroupBtn">–û—Ç–º–µ–Ω–∞</button>
                        <button id="confirmGroupBtn">–°–æ–∑–¥–∞—Ç—å</button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            const input = modal.querySelector('#groupNameInput');
            const confirmBtn = modal.querySelector('#confirmGroupBtn');
            const cancelBtn = modal.querySelector('#cancelGroupBtn');
            const backdrop = modal;

            input.focus();

            const closeModal = (result) => {
                document.body.removeChild(modal);
                resolve(result);
            };

            confirmBtn.addEventListener('click', () => {
                const groupName = input.value.trim();
                if (groupName) closeModal(groupName);
            });

            cancelBtn.addEventListener('click', () => closeModal(null));
            backdrop.addEventListener('click', () => closeModal(null));

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    const groupName = input.value.trim();
                    if (groupName) closeModal(groupName);
                }
                if (e.key === 'Escape') closeModal(null);
            });
        });
    }

    showNewRrInput() {
        if (document.getElementById('newRrInput')) return; // –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ

        const addBtn = document.getElementById('addRrBtn');
        const input = document.createElement('input');
        input.type = 'number';
        input.id = 'newRrInput';
        input.step = '0.1';
        input.placeholder = 'RR';
        input.className = 'new-rr-input';
        input.style.cssText = `
            width: 80px;
            padding: 4px 8px;
            margin-left: 4px;
            background: var(--bg-secondary);
            border: 1px solid var(--border-primary);
            border-radius: 4px;
            color: var(--text-primary);
            font-size: 12px;
        `;

        addBtn.parentNode.insertBefore(input, addBtn.nextSibling);
        input.focus();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.processNewRr();
            }
            if (e.key === 'Escape') {
                this.hideNewRrInput();
            }
        });

        input.addEventListener('blur', () => {
            setTimeout(() => this.hideNewRrInput(), 150);
        });
    }

    hideNewRrInput() {
        const input = document.getElementById('newRrInput');
        if (input) {
            input.remove();
        }
    }

    ungroupTrades(groupName) {
        const groupedTrades = this.trades.filter(t => t.groupName === groupName);

        if (groupedTrades.length === 0) {
            notifications.warning('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        groupedTrades.forEach(trade => {
            delete trade.groupId;
            delete trade.groupName;
        });

        this.saveTrades();
        this.updateDisplay();
        notifications.success(`–†–∞—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ ${groupedTrades.length} —Å–¥–µ–ª–æ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã "${groupName}"`);
    }

    processNewRr() {
        const input = document.getElementById('newRrInput');
        const newValue = input.value.trim();

        if (newValue && !isNaN(newValue)) {
            this.addCustomRr(parseFloat(newValue));
            this.hideNewRrInput();
        } else if (newValue) {
            notifications.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ');
        }
    }

    addCustomRr(value) {
        const valueStr = value.toString();
        if (!this.rrValues.includes(valueStr)) {
            this.rrValues.push(valueStr);
            this.rrValues.sort((a, b) => parseFloat(a) - parseFloat(b));
            localStorage.setItem('customRrValues', JSON.stringify(this.rrValues));
            this.updateRrButtons();
            notifications.success(`–î–æ–±–∞–≤–ª–µ–Ω–æ RR: ${value}`);
        } else {
            notifications.warning('–¢–∞–∫–æ–µ RR –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
    }

    removeCurrentRr() {
        const resultInput = document.querySelector('input[name="result"]');
        const currentValue = resultInput.value;

        if (currentValue && this.rrValues.includes(currentValue)) {
            // –ù–µ —É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 3 –∑–Ω–∞—á–µ–Ω–∏–π
            if (this.rrValues.length <= 3) {
                notifications.warning('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å - –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 3 –∑–Ω–∞—á–µ–Ω–∏—è RR');
                return;
            }

            this.rrValues = this.rrValues.filter(v => v !== currentValue);
            localStorage.setItem('customRrValues', JSON.stringify(this.rrValues));

            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            const btnToRemove = document.querySelector(`[data-rr="${currentValue}"]`);
            if (btnToRemove) {
                btnToRemove.style.transition = 'all 0.3s ease';
                btnToRemove.style.opacity = '0';
                btnToRemove.style.transform = 'scale(0.8)';
                setTimeout(() => btnToRemove.remove(), 300);
            }

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            resultInput.value = '';
            notifications.success(`–£–¥–∞–ª–µ–Ω–æ RR: ${currentValue}`);
        } else {
            notifications.warning('–í—ã–±–µ—Ä–∏—Ç–µ RR –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }
    }

    updateRrButtons() {
        const container = document.querySelector('.rr-buttons');
        const addBtn = container.querySelector('.add-rr-btn');
        const removeBtn = container.querySelector('.remove-rr-btn');

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ RR
        container.querySelectorAll('.rr-btn').forEach(btn => btn.remove());

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ RR
        this.rrValues.forEach(value => {
            const btn = document.createElement('button');
            btn.type = 'button';
            btn.className = 'rr-btn';
            btn.dataset.rr = value;
            btn.textContent = parseFloat(value) > 0 ? `+${value}` : value;
            container.insertBefore(btn, addBtn);

            btn.addEventListener('click', () => {
                const resultInput = document.querySelector('input[name="result"]');
                resultInput.value = value;

                // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                container.querySelectorAll('.rr-btn').forEach(b => b.classList.remove('selected'));
                btn.classList.add('selected');
            });
        });
    }

    changeTradeType(tradeId) {
        const trade = this.trades.find(t => t.id === parseInt(tradeId));
        if (!trade) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏
        const tradeAge = Date.now() - new Date(trade.createdAt).getTime();
        if (tradeAge >= 300000) { // 5 –º–∏–Ω—É—Ç
            notifications.warning('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç)');
            return;
        }

        // –ú–µ–Ω—è–µ–º —Ç–∏–ø
        trade.type = trade.type === 'long' ? 'short' : 'long';

        this.saveTrades();
        this.updateDisplay();

        const typeIcon = trade.type === 'long' ? 'üòá' : 'üòà';
        const typeText = trade.type === 'long' ? 'LONG' : 'SHORT';
        notifications.success(`–¢–∏–ø —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${typeIcon} ${typeText}`);
    }

    bindEvents() {
        console.log('üéØ bindEvents() –≤—ã–∑–≤–∞–Ω');
        const self = this;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RR –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.initializeRrButtons();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        setTimeout(() => {
            initCustomCalendars('input[type="date"]', {
                language: 'en-US',
                onDateSelect: (selectedDate) => {
                    console.log('Date selected:', selectedDate);
                }
            });
        }, 100);



        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        document.addEventListener('change', (e) => {
            if (e.target.name === 'currency') {
                localStorage.setItem('lastSelectedCurrency', e.target.value);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        document.addEventListener('change', (e) => {
            if (e.target.name === 'category') {
                if (e.target.value) {
                    localStorage.setItem('lastSelectedGroup', e.target.value);
                }
            }
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ RR –∑–Ω–∞—á–µ–Ω–∏—è
        document.getElementById('addRrBtn').addEventListener('click', () => {
            this.showNewRrInput();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ RR –∑–Ω–∞—á–µ–Ω–∏—è
        document.getElementById('removeRrBtn').addEventListener('click', () => {
            this.removeCurrentRr();
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
        document.getElementById('addTradeBtn').addEventListener('click', () => {
            const container = document.getElementById('tradeFormContainer');
            container.style.display = container.style.display === 'none' ? 'block' : 'none';
        });

        document.getElementById('cancelTradeBtn').addEventListener('click', () => {
            document.getElementById('tradeFormContainer').style.display = 'none';
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
        document.querySelectorAll('.type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });

        // –†–∞–Ω–¥–æ–º —Ä–µ–∂–∏–º
        document.getElementById('randomMode').addEventListener('change', (e) => {
            this.randomMode = e.target.checked;
            localStorage.setItem('randomModeState', JSON.stringify(this.randomMode));
        });

        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('ungroup-btn')) {
                const groupName = e.target.dataset.group;
                this.ungroupTrades(groupName);
            }
        });

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('collapse-btn')) {
                const groupName = e.target.dataset.group;
                this.toggleGroupCollapse(groupName);
            }
        });
        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ submit —Ñ–æ—Ä–º—ã –≤ bindEvents():
        document.getElementById('tradeForm').addEventListener('submit', (e) => {
            e.preventDefault();
            console.log('üî• Form submitted!');

            const formData = new FormData(e.target);
            const activeType = document.querySelector('.type-btn.active').dataset.type;
            let rrValue = formData.get('result');

            // –ï—Å–ª–∏ –ø–æ–ª–µ RR –ø—É—Å—Ç–æ–µ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (!rrValue || rrValue.trim() === '') {
                const randomIndex = Math.floor(Math.random() * this.rrValues.length);
                rrValue = this.rrValues[randomIndex];

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
                document.querySelector('input[name="result"]').value = rrValue;

                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
                document.querySelectorAll('.rr-btn').forEach(btn => btn.classList.remove('selected'));
                const targetBtn = document.querySelector(`[data-rr="${rrValue}"]`);
                if (targetBtn) {
                    targetBtn.classList.add('selected');
                }

                notifications.info(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ RR: ${rrValue}`);
            }

            console.log('Form data:', {
                type: activeType,
                currency: formData.get('currency'),
                date: formData.get('date'),
                result: rrValue,
                category: formData.get('category')
            });

            self.addTrade({
                type: activeType,
                currency: formData.get('currency'),
                date: formData.get('date'),
                result: parseFloat(rrValue),
                category: formData.get('category')
            });

            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ RR –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–∏
            document.querySelector('input[name="result"]').value = '';
            document.querySelectorAll('.rr-btn').forEach(btn => btn.classList.remove('selected'));
        });

        // –§–∏–ª—å—Ç—Ä—ã
        document.getElementById('currencyFilter').addEventListener('change', (e) => {
            this.currentFilter.currency = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('resultFilter').addEventListener('change', (e) => {
            this.currentFilter.result = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('dateFromFilter').addEventListener('change', (e) => {
            this.currentFilter.dateFrom = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('dateToFilter').addEventListener('change', (e) => {
            this.currentFilter.dateTo = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('groupFilter').addEventListener('change', (e) => {
            this.currentFilter.group = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('clearFiltersBtn').addEventListener('click', () => {
            this.currentFilter = { currency: 'all', result: 'all', dateFrom: '', dateTo: '' };
            document.getElementById('currencyFilter').value = 'all';
            document.getElementById('resultFilter').value = 'all';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';
            this.updateDisplay();
        });

        // –ö–ª–∏–∫ –Ω–∞ –¥–∞—Ç—É –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º—É
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('trade-date')) {
                const date = e.target.dataset.date;
                const formContainer = document.getElementById('tradeFormContainer');

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞
                if (formContainer.style.display === 'none') {
                    formContainer.style.display = 'block';
                }

                // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É
                document.querySelector('input[name="date"]').value = date;
                notifications.info(`–î–∞—Ç–∞ ${this.formatDate(date)} –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º—É`);
            }
        });

        // –ö–ª–∏–∫ –Ω–∞ —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('trade-type') && !e.target.classList.contains('disabled')) {
                const tradeId = e.target.dataset.id;
                this.changeTradeType(tradeId);
            }
        });


        // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-btn') && !e.target.classList.contains('disabled')) {
                const tradeId = e.target.dataset.id;
                const trade = this.trades.find(t => t.id === parseInt(tradeId));

                if (trade) {
                    const tradeAge = Date.now() - new Date(trade.createdAt).getTime();
                    if (tradeAge >= 300000) { // 5 –º–∏–Ω—É—Ç
                        notifications.warning('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç)');
                        return;
                    }
                }

                this.deleteTrade(tradeId);
            }
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–æ–π
        document.getElementById('prevDateBtn').addEventListener('click', () => {
            this.changeDateBy(-1);
        });

        document.getElementById('nextDateBtn').addEventListener('click', () => {
            this.changeDateBy(1);
        });

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        document.getElementById('clearFormBtn').addEventListener('click', () => {
            this.clearForm();
        });

        // –û–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ –≤ –º–µ—Ç–æ–¥–µ bindEvents()
        document.getElementById('clearAllBtn').addEventListener('click', async () => {
            const filteredCount = this.getFilteredTrades().length;
            const totalCount = this.trades.length;

            let message;
            if (filteredCount === totalCount) {
                message = `–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ${totalCount} —Å–¥–µ–ª–æ–∫ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞?`;
            } else {
                message = `–£–¥–∞–ª–∏—Ç—å ${filteredCount} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ ${totalCount} –æ–±—â–∏—Ö?`;
            }

            const confirmed = await notifications.confirm(
                message,
                '–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞',
                '–£–¥–∞–ª–∏—Ç—å',
                '–û—Ç–º–µ–Ω–∞'
            );
            if (confirmed) this.clearAllTrades();
        });

        document.getElementById('groupTradesBtn').addEventListener('click', () => {
            this.groupTrades();
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            const formContainer = document.getElementById('tradeFormContainer');
            const isFormOpen = formContainer && formContainer.style.display !== 'none';

            // –ü—Ä–æ–±–µ–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞)
            if (e.code === 'Space' && !isFormOpen && !e.target.matches('input, textarea, select')) {
                e.preventDefault();
                document.getElementById('addTradeBtn').click();
                return;
            }

            // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            if (isFormOpen) {
                // –ü—Ä–æ–±–µ–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è RR –∑–Ω–∞—á–µ–Ω–∏–π (–∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
                if (e.code === 'Space' && !e.target.matches('input, textarea, select')) {
                    e.preventDefault();
                    this.cycleRrValue();
                    return;
                }

                // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                if (e.key === 'Enter' && !e.target.matches('select, input[type="date"], input[type="number"]')) {
                    e.preventDefault();
                    document.querySelector('#tradeForm button[type="submit"]').click();
                    return;
                }

                // –°—Ç—Ä–µ–ª–∫–∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –¥–ª—è –¥–∞—Ç—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
                if (e.code === 'ArrowLeft') {
                    e.preventDefault();
                    this.changeDateBy(-1);
                    this.highlightDateButton('prev');
                }

                if (e.code === 'ArrowRight') {
                    e.preventDefault();
                    this.changeDateBy(1);
                    this.highlightDateButton('next');
                }

                // Tab –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
                if (e.code === 'Tab') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
                    if (!e.target.matches('input, select, button')) {
                        e.preventDefault();
                        const activeBtn = document.querySelector('.type-btn.active');
                        if (activeBtn) {
                            const isLong = activeBtn.dataset.type === 'long';
                            document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
                            document.querySelector(`[data-type="${isLong ? 'short' : 'long'}"]`).classList.add('active');
                        }
                    }
                }
            }
        });
    }
}