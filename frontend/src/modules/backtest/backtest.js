import './backtest.css';
import { notifications } from '../../utils/notifications.js';

export class BacktestModule {
    constructor() {
        this.trades = JSON.parse(localStorage.getItem('backtestTrades')) || [];
        this.currencies = ['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'NZDUSD', 'EURGBP', 'EURJPY'];
        this.rrValues = JSON.parse(localStorage.getItem('customRrValues')) || ['-1', '-0.8', '0', '1.5', '2'];
        this.currentFilter = { currency: 'all', result: 'all', category: 'all', group: 'all', dateFrom: '', dateTo: '' };
    }

    render() {
        return `
            <div class="backtest-container">
                <div class="backtest-header">
                    <h2>üìä Backtest Journal</h2>
                    <div class="header-actions">
                        <button class="clear-all-btn" id="clearAllBtn">–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª</button>
                        <button class="group-trades-btn" id="groupTradesBtn">–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button class="add-trade-btn" id="addTradeBtn">+ –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É</button>
                    </div>
                </div>
                
                <div class="trade-form-container" id="tradeFormContainer" style="display: none;">
                    ${this.renderTradeForm()}
                </div>
                
                <div class="filters-container">
                    ${this.renderFilters()}
                </div>
                
                <div class="trades-stats">
                    ${this.renderStats()}
                </div>
                
                <div class="trades-list">
                    ${this.renderTradesList()}
                </div>
            </div>
        `;
    }

    renderTradeForm() {
        const lastTradeDate = this.getLastTradeDate();
        const nextDate = this.getNextDate(lastTradeDate);
        const lastGroup = localStorage.getItem('lastSelectedGroup') || '';

        return `
        <div class="trade-form">
            <h3>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</h3>
            <form id="tradeForm">
                <div class="form-row">
                    <div class="form-group">
                        <label>–¢–∏–ø</label>
                        <div class="trade-type-buttons">
                            <button type="button" class="type-btn active" data-type="long">Long</button>
                            <button type="button" class="type-btn" data-type="short">Short</button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞</label>
                        <select name="currency" required>
                            ${this.currencies.map(cur => `<option value="${cur}">${cur}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–ì—Ä—É–ø–ø–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)</label>
                        <select name="category">
                            <option value="">–ë–µ–∑ –≥—Ä—É–ø–ø—ã</option>
                            ${this.getExistingGroups().map(group => `
                                <option value="${group}" ${group === lastGroup ? 'selected' : ''}>${group}</option>
                            `).join('')}
                        </select>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–î–∞—Ç–∞</label>
                        <div class="date-controls">
                            <button type="button" class="date-btn" id="prevDateBtn">‚Üê</button>
                            <input type="date" name="date" value="${nextDate}" required>
                            <button type="button" class="date-btn" id="nextDateBtn">‚Üí</button>
                        </div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–†–µ–∑—É–ª—å—Ç–∞—Ç (RR)</label>
                            <div class="rr-controls">
                                <div class="rr-buttons" id="rrButtonsContainer">
                                    <button type="button" class="add-rr-btn" id="addRrBtn">+</button>
                                    <button type="button" class="remove-rr-btn" id="removeRrBtn">‚àí</button>
<span class="mini-toggle-label">R</span>
<label class="mini-toggle-switch">
    <input type="checkbox" id="randomMode">
    <span class="mini-toggle-slider"></span>
</label>
                                </div>
                                <div class="rr-input-row">
                                    <input type="number" name="result" step="0.1" value="" placeholder="0" required>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="button" id="clearFormBtn">–û—á–∏—Å—Ç–∏—Ç—å</button>
                    <button type="button" id="cancelTradeBtn">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>

                <div class="hotkeys-info">
                    <div class="hotkey">
                        <kbd>Tab</kbd>
                        <span>–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–∏–ø</span>
                    </div>
                    <div class="hotkey">
                        <kbd>Space</kbd>
                        <span>–≤—ã–±—Ä–∞—Ç—å RR</span>
                    </div>
                    <div class="hotkey">
                        <kbd>‚Üê ‚Üí</kbd>
                        <span>–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É</span>
                    </div>
                </div>
            </form>
        </div>
    `;
    }

    renderFilters() {
        const groups = [...new Set(this.trades.filter(t => t.groupName).map(t => t.groupName))];

        return `
        <div class="filters">
            <div class="filter-group">
                <label>–í–∞–ª—é—Ç–∞:</label>
                <select id="currencyFilter">
                    <option value="all">–í—Å–µ</option>
                    ${this.currencies.map(cur => `<option value="${cur}">${cur}</option>`).join('')}
                </select>
            </div>
            <div class="filter-group">
                <label>–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                <select id="resultFilter">
                    <option value="all">–í—Å–µ</option>
                    <option value="profit">–ü—Ä–∏–±—ã–ª—å</option>
                    <option value="loss">–£–±—ã—Ç–æ–∫</option>
                    <option value="breakeven">–ë–µ–∑—É–±—ã—Ç–æ–∫</option>
                </select>
            </div>
            <div class="filter-group">
                <label>–ì—Ä—É–ø–ø–∞:</label>
                <select id="groupFilter">
                    <option value="all">–í—Å–µ</option>
                    <option value="ungrouped">–ù–µ—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                    ${groups.map(group => `<option value="${group}">${group}</option>`).join('')}
                </select>
            </div>
            <div class="filter-group">
                <label>–° –¥–∞—Ç—ã:</label>
                <input type="date" id="dateFromFilter">
            </div>
            <div class="filter-group">
                <label>–ü–æ –¥–∞—Ç—É:</label>
                <input type="date" id="dateToFilter">
            </div>
            <button id="clearFiltersBtn">–°–±—Ä–æ—Å–∏—Ç—å</button>
        </div>
    `;
    }

    renderStats() {
        const filteredTrades = this.getFilteredTrades();
        const totalTrades = filteredTrades.length;
        const winTrades = filteredTrades.filter(t => t.result > 0).length;
        const lossTrades = filteredTrades.filter(t => t.result < 0).length;
        const breakEvenTrades = filteredTrades.filter(t => t.result === 0).length;

        // –í–∏–Ω—Ä–µ–π—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã–µ)
        const tradesWithResult = winTrades + lossTrades;
        const winRate = tradesWithResult > 0 ? ((winTrades / tradesWithResult) * 100).toFixed(1) : 0;
        const totalPnL = filteredTrades.reduce((sum, t) => sum + t.result, 0).toFixed(1);

        return `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">${totalTrades}</div>
                <div class="stat-label">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
            </div>
            <div class="stat-card win">
                <div class="stat-number">${winTrades}</div>
                <div class="stat-label">–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö</div>
            </div>
            <div class="stat-card loss">
                <div class="stat-number">${lossTrades}</div>
                <div class="stat-label">–£–±—ã—Ç–æ—á–Ω—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${breakEvenTrades}</div>
                <div class="stat-label">–ë–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${winRate}%</div>
                <div class="stat-label">–í–∏–Ω—Ä–µ–π—Ç</div>
            </div>
            <div class="stat-card ${totalPnL >= 0 ? 'win' : 'loss'}">
                <div class="stat-number">${totalPnL} RR</div>
                <div class="stat-label">–û–±—â–∏–π P&L</div>
            </div>
        </div>
    `;
    }

    renderTradesList() {
        const filteredTrades = this.getFilteredTrades();

        if (filteredTrades.length === 0) {
            return `<div class="no-trades"><p>–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p></div>`;
        }

        let currentGroup = null;
        let result = '';

        return `
        <div class="trades-table">
            <div class="table-header">
                <div>–î–∞—Ç–∞</div>
                <div>–¢–∏–ø</div>
                <div>–í–∞–ª—é—Ç–∞</div>
                <div>–†–µ–∑—É–ª—å—Ç–∞—Ç</div>
                <div>–î–µ–π—Å—Ç–≤–∏—è</div>
            </div>
            ${filteredTrades.map(trade => {
            let groupHeader = '';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if (trade.groupName && trade.groupName !== currentGroup) {
                currentGroup = trade.groupName;
                groupHeader = `
                        <div class="group-separator">
                            üìÅ ${trade.groupName}
                        </div>
                    `;
            } else if (!trade.groupName && currentGroup !== null) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–µ—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                currentGroup = null;
            }

            return `
                    ${groupHeader}
                    <div class="table-row ${trade.groupName ? 'grouped' : ''}">
                        <div class="trade-date">${this.formatDate(trade.date)}</div>
                        <div class="trade-type ${trade.type}">${trade.type.toUpperCase()}</div>
                        <div class="trade-currency">${trade.currency}</div>
                        <div class="trade-result ${trade.result > 0 ? 'profit' : trade.result < 0 ? 'loss' : 'breakeven'}">
                            ${trade.result > 0 ? '+' : ''}${trade.result} RR
                            </div>
                    <div class="trade-actions">
                        <button class="delete-btn" data-id="${trade.id}">‚úï</button>
                    </div>
                    </div>
                `;
        }).join('')}
        </div>
    `;
    }

    showGroupModal(ungroupedCount) {
        const modal = document.createElement('div');
        modal.className = 'group-modal';
        modal.innerHTML = `
        <div class="modal-backdrop"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h3>–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</h3>
            </div>
            <div class="modal-body">
                <p>–ù–µ—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: <strong>${ungroupedCount}</strong></p>
                <input type="text" id="groupNameInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" autofocus>
            </div>
            <div class="modal-footer">
                <button id="cancelGroupBtn">–û—Ç–º–µ–Ω–∞</button>
                <button id="confirmGroupBtn">–°–æ–∑–¥–∞—Ç—å</button>
            </div>
        </div>
    `;

        document.body.appendChild(modal);

        return new Promise((resolve) => {
            const confirmBtn = modal.querySelector('#confirmGroupBtn');
            const cancelBtn = modal.querySelector('#cancelGroupBtn');
            const backdrop = modal.querySelector('.modal-backdrop');
            const input = modal.querySelector('#groupNameInput');

            const closeModal = (result) => {
                document.body.removeChild(modal);
                resolve(result);
            };

            confirmBtn.addEventListener('click', () => {
                const groupName = input.value.trim();
                if (groupName) closeModal(groupName);
            });

            cancelBtn.addEventListener('click', () => closeModal(null));
            backdrop.addEventListener('click', () => closeModal(null));

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    const groupName = input.value.trim();
                    if (groupName) closeModal(groupName);
                }
                if (e.key === 'Escape') closeModal(null);
            });
        });
    }

    removeCurrentRr() {
        const resultInput = document.querySelector('input[name="result"]');
        const currentValue = resultInput.value;

        if (currentValue && this.rrValues.includes(currentValue)) {
            // –ù–µ —É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 3 –∑–Ω–∞—á–µ–Ω–∏–π
            if (this.rrValues.length <= 3) {
                notifications.warning('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å - –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 3 –∑–Ω–∞—á–µ–Ω–∏—è RR');
                return;
            }

            this.rrValues = this.rrValues.filter(v => v !== currentValue);
            localStorage.setItem('customRrValues', JSON.stringify(this.rrValues));

            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            const btnToRemove = document.querySelector(`[data-rr="${currentValue}"]`);
            if (btnToRemove) {
                btnToRemove.style.transition = 'all 0.3s ease';
                btnToRemove.style.opacity = '0';
                btnToRemove.style.transform = 'scale(0.8)';
                setTimeout(() => btnToRemove.remove(), 300);
            }

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            resultInput.value = '';
            notifications.success(`–£–¥–∞–ª–µ–Ω–æ RR: ${currentValue}`);
        } else {
            notifications.warning('–í—ã–±–µ—Ä–∏—Ç–µ RR –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }
    }



    addCustomRr(value) {
        if (!this.rrValues.includes(value.toString())) {
            this.rrValues.push(value.toString());
            this.rrValues.sort((a, b) => parseFloat(a) - parseFloat(b));
            localStorage.setItem('customRrValues', JSON.stringify(this.rrValues));
            this.updateRrButtons();
        }
    }

    updateRrButtons() {
        const container = document.querySelector('.rr-buttons');
        const addBtn = container.querySelector('.add-rr-btn');

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ RR
        container.querySelectorAll('.rr-btn').forEach(btn => btn.remove());

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ RR
        this.rrValues.forEach(value => {
            const btn = document.createElement('button');
            btn.type = 'button';
            btn.className = 'rr-btn';
            btn.dataset.rr = value;
            btn.textContent = parseFloat(value) > 0 ? `+${value}` : value;
            container.insertBefore(btn, addBtn);

            btn.addEventListener('click', () => {
                document.querySelector('input[name="result"]').value = value;
            });
        });
    }

    getNextRrValue(currentValue, isRandom = false) {
        if (isRandom) {
            const randomIndex = Math.floor(Math.random() * this.rrValues.length);
            return this.rrValues[randomIndex];
        }

        // –õ–æ–≥–∏–∫–∞: 0 ‚Üí +–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ ‚Üí -–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ ‚Üí +—Å–ª–µ–¥—É—é—â–µ–µ ‚Üí -—Å–ª–µ–¥—É—é—â–µ–µ
        const positiveValues = this.rrValues.filter(v => parseFloat(v) > 0).sort((a, b) => parseFloat(b) - parseFloat(a)); // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
        const negativeValues = this.rrValues.filter(v => parseFloat(v) < 0).sort((a, b) => parseFloat(a) - parseFloat(b)); // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–æ—Ç -1 –∫ -2)
        const zeroValue = this.rrValues.find(v => parseFloat(v) === 0);

        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0, +2, -2, +1, -1, +3, -3...
        const sequence = [];
        if (zeroValue) sequence.push(zeroValue);

        const maxLength = Math.max(positiveValues.length, negativeValues.length);
        for (let i = 0; i < maxLength; i++) {
            if (positiveValues[i]) sequence.push(positiveValues[i]);
            if (negativeValues[i]) sequence.push(negativeValues[i]);
        }

        if (currentValue === '' || !sequence.includes(currentValue)) {
            return sequence[0] || this.rrValues[0];
        }

        const currentIndex = sequence.indexOf(currentValue);
        const nextIndex = (currentIndex + 1) % sequence.length;
        return sequence[nextIndex];
    }
    showNewRrInput() {
        if (document.getElementById('newRrInput')) return; // –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ

        const addBtn = document.getElementById('addRrBtn');
        const input = document.createElement('input');
        input.type = 'number';
        input.id = 'newRrInput';
        input.step = '0.1';
        input.placeholder = 'RR';
        input.className = 'new-rr-input-inline';

        addBtn.parentNode.insertBefore(input, addBtn.nextSibling);
        input.focus();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.processNewRr();
            }
            if (e.key === 'Escape') {
                this.hideNewRrInput();
            }
        });

        input.addEventListener('blur', () => {
            setTimeout(() => this.hideNewRrInput(), 150);
        });
    }

    hideNewRrInput() {
        const input = document.getElementById('newRrInput');
        if (input) {
            input.remove();
        }
    }

    initializeRrButtons() {
        const container = document.querySelector('.rr-buttons');
        const addBtn = container.querySelector('.add-rr-btn');

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫—Ä–æ–º–µ "+"
        container.querySelectorAll('.rr-btn').forEach(btn => btn.remove());

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ RR –∫–Ω–æ–ø–∫–∏
        this.rrValues.forEach(value => {
            const btn = document.createElement('button');
            btn.type = 'button';
            btn.className = 'rr-btn';
            btn.dataset.rr = value;
            btn.textContent = parseFloat(value) > 0 ? `+${value}` : value;
            container.insertBefore(btn, addBtn);

            btn.addEventListener('click', () => {
                document.querySelector('input[name="result"]').value = value;
            });
        });
    }

    processNewRr() {
        const input = document.getElementById('newRrInput');
        const newValue = input.value.trim();

        if (newValue && !isNaN(newValue)) {
            this.addCustomRr(parseFloat(newValue));
            this.hideNewRrInput();
        } else if (newValue) {
            notifications.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ');
        }
    }

    getExistingGroups() {
        return [...new Set(this.trades.filter(t => t.groupName).map(t => t.groupName))];
    }


    clearAllTrades() {
        this.trades = [];
        this.saveTrades();
        this.updateDisplay();
        notifications.success('–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω');
    }

    async groupTrades() {
        const ungroupedTrades = this.trades.filter(t => !t.groupId);
        if (ungroupedTrades.length === 0) {
            notifications.warning('–ù–µ—Ç –Ω–µ—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
            return;
        }

        const groupName = await this.showGroupModal(ungroupedTrades.length);
        if (!groupName) return;

        const groupId = Date.now();
        ungroupedTrades.forEach(trade => {
            trade.groupId = groupId;
            trade.groupName = groupName;
        });

        this.saveTrades();
        this.updateDisplay();
        notifications.success(`–°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ "${groupName}" —Å ${ungroupedTrades.length} —Å–¥–µ–ª–∫–∞–º–∏`);
    }

    getLastTradeDate() {
        if (this.trades.length === 0) return new Date().toISOString().split('T')[0];
        const sortedTrades = [...this.trades].sort((a, b) => new Date(b.date) - new Date(a.date));
        return sortedTrades[0].date;
    }

    changeDateBy(days) {
        const dateInput = document.querySelector('input[name="date"]');
        const currentDate = new Date(dateInput.value);
        currentDate.setDate(currentDate.getDate() + days);
        dateInput.value = currentDate.toISOString().split('T')[0];
    }

    clearForm() {
        const form = document.getElementById('tradeForm');
        form.reset();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const resultInput = document.querySelector('input[name="result"]');
        resultInput.value = '';

        const nextDate = this.getNextDate(this.getLastTradeDate());
        document.querySelector('input[name="date"]').value = nextDate;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –Ω–∞ Long
        document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
        document.querySelector('[data-type="long"]').classList.add('active');

        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å RR –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.rr-btn').forEach(btn => btn.classList.remove('selected'));
    }

    getNextDate(lastDate) {
        const date = new Date(lastDate);
        date.setDate(date.getDate() + 1);
        return date.toISOString().split('T')[0];
    }

    getFilteredTrades() {
        return this.trades.filter(trade => {
            if (this.currentFilter.currency !== 'all' && trade.currency !== this.currentFilter.currency) {
                return false;
            }

            if (this.currentFilter.result !== 'all') {
                if (this.currentFilter.result === 'profit' && trade.result <= 0) return false;
                if (this.currentFilter.result === 'loss' && trade.result >= 0) return false;
                if (this.currentFilter.result === 'breakeven' && trade.result !== 0) return false;
            }

            if (this.currentFilter.group && this.currentFilter.group !== 'all') {
                if (this.currentFilter.group === 'ungrouped' && trade.groupName) return false;
                if (this.currentFilter.group !== 'ungrouped' && trade.groupName !== this.currentFilter.group) return false;
            }

            if (this.currentFilter.dateFrom && trade.date < this.currentFilter.dateFrom) return false;
            if (this.currentFilter.dateTo && trade.date > this.currentFilter.dateTo) return false;

            return true;
        }).sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ
            if (a.groupName && !b.groupName) return -1;
            if (!a.groupName && b.groupName) return 1;
            if (a.groupName !== b.groupName) return (a.groupName || '').localeCompare(b.groupName || '');
            return new Date(b.date) - new Date(a.date);
        });
    }

    formatDate(dateStr) {
        return new Date(dateStr).toLocaleDateString('ru-RU');
    }

    saveTrades() {
        console.log('üíæ saveTrades() –≤—ã–∑–≤–∞–Ω');
        console.log('üìù –°–æ—Ö—Ä–∞–Ω—è—é trades:', this.trades);
        localStorage.setItem('backtestTrades', JSON.stringify(this.trades));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    }

    addTrade(tradeData) {

        console.log('üîÑ addTrade –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', tradeData);

        const trade = {
            id: Date.now(),
            ...tradeData,
            createdAt: new Date().toISOString()
        };

        console.log('üíæ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏:', trade);
        console.log('üìä –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ trades –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', this.trades.length);
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
        if (tradeData.category) {
            const existingGroup = this.trades.find(t => t.groupName === tradeData.category);
            if (existingGroup) {
                trade.groupId = existingGroup.groupId;
                trade.groupName = tradeData.category;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        if (tradeData.category) {
            localStorage.setItem('lastSelectedGroup', tradeData.category);
        }

        this.trades.push(trade);
        this.saveTrades();
        this.updateDisplay();
        notifications.success('–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }



    deleteTrade(tradeId) {
        this.trades = this.trades.filter(t => t.id !== parseInt(tradeId));
        this.saveTrades();
        this.updateDisplay();
        notifications.success('–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
    }

    updateDisplay() {
        document.querySelector('.trades-stats').innerHTML = this.renderStats();
        document.querySelector('.trades-list').innerHTML = this.renderTradesList();
    }

    highlightDateButton(direction) {
        const btn = document.getElementById(direction === 'prev' ? 'prevDateBtn' : 'nextDateBtn');
        btn.classList.add('pressed');
        setTimeout(() => btn.classList.remove('pressed'), 150);
    }

    bindEvents() {
        console.log('üéØ bindEvents() –≤—ã–∑–≤–∞–Ω');
        const self = this;
        console.log('üìã –§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞:', document.getElementById('tradeForm'));

        const submitBtn = document.querySelector('#tradeForm button[type="submit"]');
        if (submitBtn) {
            submitBtn.click();
        } else {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ submit –Ω–∞–ø—Ä—è–º—É—é
            const form = document.getElementById('tradeForm');
            if (form) {
                console.log('üöÄ Dispatching submit event from hotkey');
                form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));
            }
        }
        console.log('üéØ –ö–Ω–æ–ø–∫–∞ submit –Ω–∞–π–¥–µ–Ω–∞:', submitButton);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RR –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.initializeRrButtons();
        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
        document.getElementById('addTradeBtn').addEventListener('click', () => {
            const container = document.getElementById('tradeFormContainer');
            container.style.display = container.style.display === 'none' ? 'block' : 'none';
        });

        document.getElementById('cancelTradeBtn').addEventListener('click', () => {
            document.getElementById('tradeFormContainer').style.display = 'none';
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
        document.querySelectorAll('.type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });

        // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä RR
        document.querySelectorAll('.rr-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelector('input[name="result"]').value = btn.dataset.rr;
            });
        });


        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ submit –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        document.addEventListener('submit', (e) => {
            console.log('üéØ SUBMIT EVENT CAUGHT! Target:', e.target.id, e.target);

            if (e.target.id === 'tradeForm') {
                console.log('üî• Form submitted via delegation!');
                e.preventDefault();
                console.log('üî• Form submitted via delegation!');

                const formData = new FormData(e.target);
                const activeType = document.querySelector('.type-btn.active').dataset.type;

                console.log('Form data:', {
                    type: activeType,
                    currency: formData.get('currency'),
                    date: formData.get('date'),
                    result: formData.get('result'),
                    category: formData.get('category')
                });

                self.addTrade({  // this. -> self.
                    type: activeType,
                    currency: formData.get('currency'),
                    date: formData.get('date'),
                    result: parseFloat(formData.get('result')),
                    category: formData.get('category')
                });

                self.clearForm();  // this. -> self.
                document.getElementById('tradeFormContainer').style.display = 'none';
            }
        });

        // –§–∏–ª—å—Ç—Ä—ã
        document.getElementById('currencyFilter').addEventListener('change', (e) => {
            this.currentFilter.currency = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('resultFilter').addEventListener('change', (e) => {
            this.currentFilter.result = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('dateFromFilter').addEventListener('change', (e) => {
            this.currentFilter.dateFrom = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('dateToFilter').addEventListener('change', (e) => {
            this.currentFilter.dateTo = e.target.value;
            this.updateDisplay();
        });
        document.getElementById('groupFilter').addEventListener('change', (e) => {
            this.currentFilter.group = e.target.value;
            this.updateDisplay();
        });

        document.getElementById('clearFiltersBtn').addEventListener('click', () => {
            this.currentFilter = { currency: 'all', result: 'all', dateFrom: '', dateTo: '' };
            document.getElementById('currencyFilter').value = 'all';
            document.getElementById('resultFilter').value = 'all';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';
            this.updateDisplay();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-btn')) {
                const tradeId = e.target.dataset.id;
                this.deleteTrade(tradeId);
            }
        });

        // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä RR —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('rr-btn')) {
                const value = e.target.dataset.rr;
                document.querySelector('input[name="result"]').value = value;

                // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                document.querySelectorAll('.rr-btn').forEach(btn => btn.classList.remove('selected'));
                e.target.classList.add('selected');
            }
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–æ–π
        document.getElementById('prevDateBtn').addEventListener('click', () => {
            this.changeDateBy(-1);
        });

        document.getElementById('nextDateBtn').addEventListener('click', () => {
            this.changeDateBy(1);
        });

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        document.getElementById('clearFormBtn').addEventListener('click', () => {
            this.clearForm();
        });


        // –û—á–∏—Å—Ç–∫–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        document.getElementById('clearAllBtn').addEventListener('click', async () => {
            const confirmed = await notifications.confirm(
                '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞?',
                '–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞',
                '–£–¥–∞–ª–∏—Ç—å',
                '–û—Ç–º–µ–Ω–∞'
            );
            if (confirmed) this.clearAllTrades();
        });

        document.getElementById('groupTradesBtn').addEventListener('click', () => {
            this.groupTrades();
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ RR –∑–Ω–∞—á–µ–Ω–∏—è
        document.getElementById('addRrBtn').addEventListener('click', () => {
            this.showNewRrInput();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ RR –∑–Ω–∞—á–µ–Ω–∏—è
        document.getElementById('removeRrBtn').addEventListener('click', () => {
            this.removeCurrentRr();
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            const formContainer = document.getElementById('tradeFormContainer');
            const isFormOpen = formContainer && formContainer.style.display !== 'none';

            // –ü—Ä–æ–±–µ–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∑–∞–∫—Ä—ã—Ç–∞)
            if (e.code === 'Space' && !isFormOpen && !e.target.matches('input, textarea, select')) {
                e.preventDefault();
                document.getElementById('addTradeBtn').click();
                return;
            }

            // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã (–∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
            if (e.key === 'Enter' && isFormOpen && !e.target.matches('select, input[type="date"], input[type="number"]')) {
                e.preventDefault();
                document.querySelector('#tradeForm button[type="submit"]').click();
                return;
            }

            if (isFormOpen) {
                // –°—Ç—Ä–µ–ª–∫–∏ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –¥–ª—è –¥–∞—Ç—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
                if (e.code === 'ArrowLeft') {
                    e.preventDefault();
                    this.changeDateBy(-1);
                    this.highlightDateButton('prev');
                }

                if (e.code === 'ArrowRight') {
                    e.preventDefault();
                    this.changeDateBy(1);
                    this.highlightDateButton('next');
                }

                if (e.code === 'Tab' && isFormOpen) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                    if (!e.target.matches('input, select, button')) {
                        e.preventDefault();
                        const activeBtn = document.querySelector('.type-btn.active');
                        if (activeBtn) {
                            const isLong = activeBtn.dataset.type === 'long';
                            document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
                            document.querySelector(`[data-type="${isLong ? 'short' : 'long'}"]`).classList.add('active');
                        }
                    }
                }

                if (e.code === 'Space' && !e.target.matches('input, select')) {
                    e.preventDefault();
                    const resultInput = document.querySelector('input[name="result"]');
                    const isRandom = document.getElementById('randomMode').checked;

                    const currentValue = resultInput.value;
                    const nextValue = this.getNextRrValue(currentValue, isRandom);
                    resultInput.value = nextValue;

                    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
                    document.querySelectorAll('.rr-btn').forEach(btn => btn.classList.remove('selected'));
                    const selectedBtn = document.querySelector(`[data-rr="${nextValue}"]`);
                    if (selectedBtn) selectedBtn.classList.add('selected');
                }
            }
        });
    }
}